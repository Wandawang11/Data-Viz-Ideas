devtools::install_github("leonawicz/mapmate")
### Creating a spinning globe using Mapmate package
# Wanda Wang
# Jan 3rd
# Install Package
# library(devtools)
# devtools::install_github("leonawicz/mapmate")
# Set-up
library(mapmate)
library(dplyr)
data(annualtemps)
# Following Matthew Leonawicz's annual temperature example
annualtemps
View(annualtemps)
install.packages('RColorBrewer')
?rev
?brewer.pal
# Set-up
library(mapmate)
library(dplyr)
library(RColorBrewer)
?brewer.pal()
### Creating a spinning globe using Mapmate package
# Wanda Wang
# Jan 3rd
# Install Package
# library(devtools)
# devtools::install_github("leonawicz/mapmate")
# Set-up
library(mapmate)
library(dplyr)
library(RColorBrewer)
data(annualtemps)
pal <- rev(brewer.pal(11, "RdYlBu"))
# Following Matthew Leonawicz's annual temperature example
pal
head(annualtemps)
### Creating a spinning globe using Mapmate package
### Following Matthew Leonawicz's annual temperature example
# Wanda Wang
# Jan 3rd
# Install Package
# library(devtools)
# devtools::install_github("leonawicz/mapmate")
# Set-up
library(mapmate)
library(dplyr)
library(RColorBrewer)
data(annualtemps)
pal <- rev(brewer.pal(11, "RdYlBu"))
# create frameID as index for Year
temps <- mutate(annualtemps, frameID = Year - min(Year) + 1)
View(temps)
frame1 <- filter(temps, frameID == 1)
View(frame1)
?save_map
save_map(frame1, z.name = "z", id = id, ortho = FALSE,
col = pal, type = "maptiles", save.plot = FALSE,
return.plot = TRUE)
### Creating a spinning globe using Mapmate package
### Following Matthew Leonawicz's annual temperature example
# Wanda Wang
# Jan 3rd
# Install Package
# library(devtools)
# devtools::install_github("leonawicz/mapmate")
# Set-up
library(mapmate)
library(dplyr)
library(RColorBrewer)
data(annualtemps)
pal <- rev(brewer.pal(11, "RdYlBu"))
# create frameID as index for Year
temps <- mutate(annualtemps, frameID = Year - min(Year) + 1)
# subset to the first year of temp
frame1 <- filter(temps, frameID == 1)
id <- "frameID"
# create the maps
save_map(frame1, z.name = "z", id = id, ortho = FALSE,
col = pal, type = "maptiles", save.plot = FALSE,
return.plot = TRUE)
#save_map(frame1, z.name = "z", id = id)
save_map(frame1, z.name = "z", id = id,
col = pal, type = "maptiles",
save.plot = FALSE, return.plot = TRUE)
tbl_busStatus <- data_consul %>%
select(Business_Status__c) %>%
filter(Business_Status__c != '') %>%
group_by(Business_Status__c) %>%
summarize(NumberOfClients = n()) %>%
mutate(Percentage = NumberOfClients / sum(NumberOfClients))
# GET THE N NUMBER FOR ALL VISUALIZATIONS
knitr::opts_chunk$set(echo = TRUE)
# for data manipulation
library(dplyr)
library(tidyr)
library(rmarkdown)
# for formatting
library(ggplot2)
#library(ggthemes)
library(stringr)
setwd("/Users/wwang/Box Sync/MDC Shared/Innovation Economy/Partnerships/SBEC/R codes")
# load the consultation data
if(!exists("data_consul")) {
data_consul <- read.csv('ET-Consultation Data(June2017).csv',
header = TRUE,
na.strings=c("","NA"))
}
# load the business registration data (the July data is loaded here as the June data doesn't have CRA numbers)
if(!exists("data_busreg")) {
data_busreg <- read.csv('ET-BizRegistration Data(July2017).csv',
header = TRUE,
na.strings=c("","NA"))
}
# load the follow-up data
if(!exists("data_followup")) {
data_followup <- read.csv('ET-ClientFollowUp(June2017).csv',
header = TRUE,
na.strings=c("","NA"))
}
View(data_consul)
tbl_busStatus <- data_consul %>%
select(Business_Status__c) %>%
filter(Business_Status__c != '') %>%
group_by(Business_Status__c) %>%
summarize(NumberOfClients = n()) %>%
mutate(Percentage = NumberOfClients / sum(NumberOfClients))
# GET THE N NUMBER FOR ALL VISUALIZATIONS
View(tbl_busStatus)
